import streamlit as st
import datetime as dt
import bcrypt
from time import sleep
from utils.send_email import send_email

def recover_complete_message():
    recover_time = dt.datetime.now()
    return f"""
    <html>
        <body>
            <p>‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏π‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>
            <p>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {recover_time.strftime("%d/%m/%y")}</p>
            <p>‡πÄ‡∏ß‡∏•‡∏≤ {recover_time.strftime("%H:%M:%S")}</p>
            <p>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</p>
        </body>
    </html>
    """

def to_login():
    if 'pswd_valid' in st.session_state:
        del st.session_state.pswd_valid
    
    if 'query_email' in st.session_state:
        del st.session_state.query_email
    
    st.switch_page('streamlit_app.py')

def recover():
    
    mail_payload = {
        'subject' : "‡∏Å‡∏π‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        'body' : recover_complete_message()
    }
    
    if send_email(st.session_state.query_email, mail_payload) == "success":
        
            database = st.session_state.client[st.secrets["mongo"]["col"]]
            collection = database[st.secrets["mongo"]["user"]]
            
            salt = bcrypt.gensalt()
            byte_pswd = bytes(new_pswd, 'utf-8')
            hash_password = bcrypt.hashpw(byte_pswd, salt)
            
            new_pswd_payload = {
                "password" : hash_password,
                "salt" : salt
            }
            
            collection.update_one(
                { "user_mail" : st.session_state.query_email }, 
                { "$set" : new_pswd_payload } 
            )
            
            st.session_state.user_set = list(collection.find())
            
            st.toast("‚úîÔ∏è ‡∏Å‡∏π‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            sleep(1)
            to_login()
            
if ('query_email' not in st.session_state):
    to_login()

with st.form("new password",border=True):
    
    new_pswd = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",type="password", 
                help="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏£‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    
    con_pswd = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",type="password")
    
    if "pswd_valid" not in st.session_state:
        st.session_state.pswd_valid = False
    else:
        if (len(new_pswd) == 0):
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
        else:
            if " " in new_pswd:
                st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á")
            elif (len(new_pswd) < 5):
                st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£") 
            elif (len(con_pswd) == 0):
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
            elif (new_pswd != con_pswd):
                st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            else:
                st.success("üëå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
                recover()
                
    st.form_submit_button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", use_container_width=True, type="primary")
    
with st.popover("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", use_container_width=True):
    st.markdown("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å OTP? ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏´‡∏°‡πà")
    back_to_login = st.button("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", use_container_width=True)
    
    if back_to_login:
        back_to_login()